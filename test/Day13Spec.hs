module Day13Spec where

import Day13 (Instruction (..), extract, foldPoints, transform, solve)
import Test.Hspec (Spec, it, shouldBe)

spec :: Spec
spec = do
  it "should extract raw" $ do
    extract ["6,10", "0,14", "9,10", "0,3", "10,4", "4,11", "6,0", "6,12", "4,1", "0,13", "10,12", "3,4", "3,0", "8,4", "1,10", "2,14", "8,10", "9,0", "", "fold along y=7", "fold along x=5"]
      `shouldBe` (["6,10", "0,14", "9,10", "0,3", "10,4", "4,11", "6,0", "6,12", "4,1", "0,13", "10,12", "3,4", "3,0", "8,4", "1,10", "2,14", "8,10", "9,0"], ["fold along y=7", "fold along x=5"])

  it "should transform raw" $ do
    transform (["6,10", "0,14", "9,10", "0,3", "10,4", "4,11", "6,0", "6,12", "4,1", "0,13", "10,12", "3,4", "3,0", "8,4", "1,10", "2,14", "8,10", "9,0"], ["fold along y=7", "fold along x=5"])
      `shouldBe` ([(6, 10), (0, 14), (9, 10), (0, 3), (10, 4), (4, 11), (6, 0), (6, 12), (4, 1), (0, 13), (10, 12), (3, 4), (3, 0), (8, 4), (1, 10), (2, 14), (8, 10), (9, 0)], [Horizontal 7, Vertical 5])

  it "should fold points for instruction" $ do
    foldPoints [(6, 10), (0, 14), (9, 10), (0, 3), (10, 4), (4, 11), (6, 0), (6, 12), (4, 1), (0, 13), (10, 12), (3, 4), (3, 0), (8, 4), (1, 10), (2, 14), (8, 10), (9, 0)] (Horizontal 7)
      `shouldBe` [(0, 0), (0, 1), (0, 3), (1, 4), (2, 0), (3, 0), (3, 4), (4, 1), (4, 3), (6, 0), (6, 2), (6, 4), (8, 4), (9, 0), (9, 4), (10, 2), (10, 4)]

  it "should count dots for one fold instruction" $ do
     solve ["6,10", "0,14", "9,10", "0,3", "10,4", "4,11", "6,0", "6,12", "4,1", "0,13", "10,12", "3,4", "3,0", "8,4", "1,10", "2,14", "8,10", "9,0", "", "fold along y=7", "fold along x=5"]
      `shouldBe` 17
